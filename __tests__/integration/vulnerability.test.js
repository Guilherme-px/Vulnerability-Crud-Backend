const request = require('supertest');
const Vulnerability = require('../../src/models/Vulnerability');
const app = require('../../src/index');

const path = require('path');
const fs = require('fs');
const { promisify } = require('util');
const unlinkAsync = promisify(fs.unlink);

let vulnerabilities;

beforeEach(() => {
    vulnerabilities = [
        {
            title: 'security breach',
            description: 'a security breach',
            criticality: 'min',
            vulnerability: 'NETWORK',
            solution: 'add validation',
        },
        {
            title: 'weak password',
            description: 'very weak password',
            criticality: 'high',
            vulnerability: 'DAST',
            solution: 'encrypt password',
        },
        {
            title: '',
            description: '',
            criticality: 'high',
            vulnerability: 'SAST',
            solution: 'encrypt password',
        },
    ];
});

afterAll(async () => {
    await Vulnerability.deleteMany();
});

describe('register', () => {
    it('should register the vulnerabilities in the database', async () => {
        const response = await request(app)
            .post('/vulnerability/register')
            .send(vulnerabilities[0]);

        expect(response.status).toBe(201);
    });

    it('should return a msg property with a success message', async () => {
        const response = await request(app)
            .post('/vulnerability/register')
            .send(vulnerabilities[1]);

        expect(response.body).toHaveProperty('msg');
        expect(response.body.msg).toBe(
            'Vulnerabilidade cadastrada com sucesso!'
        );
    });

    it('should return status 400 if it does not receive mandatory data', async () => {
        const response = await request(app)
            .post('/vulnerability/register')
            .send(vulnerabilities[2]);

        expect(response.status).toBe(400);
    });
});

describe('Get vulnerabilities', () => {
    it('must return the vulnerabilities registered in the database', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.status).toBe(200);
    });

    it('should contain a property called vulnerabilities', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.body).toHaveProperty('vulnerabilities');
    });

    it('should return data limit equal to 10', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.body.limit).toEqual(10);
    });

    it('should contain a property called totalPages', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.body).toHaveProperty('totalPages');
    });

    it("shouldn't accept a value <= 0 in 'page' parameter", async () => {
        const page = -1;

        const response = await request(app).get('/vulnerability').query({
            page: page,
        });

        expect(response.status).toBe(400);
    });

    it("shouldn't accept that the 'page' parameter is >= to the total number of pages", async () => {
        const page = 100;

        const response = await request(app).get('/vulnerability').query({
            page: page,
        });

        expect(response.status).toBe(400);
    });

    it('should do a search in the title field that matches the text received in the search parameter', async () => {
        const search = 'security breach';

        const response = await request(app).get('/vulnerability').query({
            search: search,
        });

        expect(response.body.vulnerabilities[0].title).toEqual(
            'security breach'
        );
    });

    it('should do a search in the criticality field that matches the text received in the search parameter', async () => {
        const search = 'high';

        const response = await request(app).get('/vulnerability').query({
            search: search,
        });

        expect(response.body.vulnerabilities[0].criticality).toEqual('high');
    });
});

describe('Get vulnerabilities by id', () => {
    it('should return status 422 with a message if the id is in an invalid format', async () => {
        const id = '6';
        const response = await request(app).get(`/vulnerability/${id}`);

        expect(response.status).toBe(422);
        expect(response.body.msg).toEqual('ID inválido');
    });

    it('should return status 404 with a message if id is not found', async () => {
        const id = '62200974c732a4478f0159a0';
        const response = await request(app).get(`/vulnerability/${id}`);

        expect(response.status).toBe(404);
        expect(response.body.msg).toEqual('Vulnerabilidade não encontrada!');
    });

    it('should return status 200 with a message if the id is found', async () => {
        const vulnerabilityId = await request(app).get(`/vulnerability`);
        const id = vulnerabilityId.body.vulnerabilities[0]._id;

        const response = await request(app).get(`/vulnerability/${id}`);

        expect(response.status).toBe(200);
        expect(response.body).toHaveProperty('vulnerabilities');
    });

    test('should return status 201 after receiving data with an image', async () => {
        const image = path.resolve(__dirname, '../assets/labra2.jpg');

        await request(app)
            .post('/vulnerability/register')
            .field('title', 'test')
            .field('description', 'make tests')
            .field('criticality', 'high')
            .field('vulnerability', 'SAST')
            .field('solution', 'start studying tests')
            .attach('evidence', image)
            .then((res) => {
                expect(res.status).toBe(201);
            });

        // Search the vulnerability database
        const vulnerabilities = await Vulnerability.find();
        // Assigns the generated name to the evidence image in the path where it was saved
        const deleteImage = path.resolve(
            __dirname,
            `../../public/images/evidence/${vulnerabilities[2].evidence}`
        );
        // Delete the image from the folder where it was saved to keep the folder clean
        unlinkAsync(deleteImage);
    });
});

describe('Vulnerability update route testing', () => {
    it('should return status 422 with a message if the id is in an invalid format', async () => {
        const id = '6';
        const response = await request(app).patch(`/vulnerability/${id}`);

        expect(response.status).toBe(422);
        expect(response.body.msg).toEqual('ID inválido');
    });

    it('should return status 404 with a message if id is not found', async () => {
        const id = '62200974c732a4478f0159a0';
        const response = await request(app).patch(`/vulnerability/${id}`);

        expect(response.status).toBe(404);
        expect(response.body.msg).toEqual('Vulnerabilidade não encontrada!');
    });
});

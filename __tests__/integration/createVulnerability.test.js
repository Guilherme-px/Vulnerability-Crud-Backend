const request = require('supertest');
const Vulnerability = require('../../src/models/Vulnerability');
const app = require('../../src/index');

let vulnerabilities;

beforeEach(() => {
    vulnerabilities = [
        {
            title: 'security breach',
            description: 'a security breach',
            criticality: 'min',
            vulnerability: 'NETWORK',
            solution: 'add validation',
        },
        {
            title: 'weak password',
            description: 'very weak password',
            criticality: 'high',
            vulnerability: 'SAST',
            solution: 'encrypt password',
        },
        {
            title: '',
            description: '',
            criticality: 'high',
            vulnerability: 'SAST',
            solution: 'encrypt password',
        },
    ];
});

afterAll(async () => {
    await Vulnerability.deleteMany();
});

describe('register', () => {
    it('should register the vulnerabilities in the database', async () => {
        const response = await request(app)
            .post('/vulnerability/register')
            .send(vulnerabilities[0]);

        expect(response.status).toBe(201);
    });

    it('should return a msg property with a success message', async () => {
        const response = await request(app)
            .post('/vulnerability/register')
            .send(vulnerabilities[0]);

        expect(response.body).toHaveProperty('msg');
        expect(response.body.msg).toBe(
            'Vulnerabilidade cadastrada com sucesso!'
        );
    });

    it('should return status 400 if it does not receive mandatory data', async () => {
        const response = await request(app)
            .post('/vulnerability/register')
            .send(vulnerabilities[2]);

        expect(response.status).toBe(400);
    });
});

describe('Get vulnerabilities', () => {
    it('must return the vulnerabilities registered in the database', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.status).toBe(200);
    });

    it('should contain a property called vulnerabilities', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.body).toHaveProperty('vulnerabilities');
    });

    it('should return data limit equal to 10', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.body.limit).toEqual(10);
    });

    it('should contain a property called totalPages', async () => {
        const response = await request(app).get('/vulnerability');

        expect(response.body).toHaveProperty('totalPages');
    });

    it("shouldn't accept a value <= 0 in 'page' parameter", async () => {
        const page = -1;

        const response = await request(app).get('/vulnerability').query({
            page: page,
        });

        expect(response.status).toBe(400);
    });
});

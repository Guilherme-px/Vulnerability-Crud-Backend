// Models
const Vulnerability = require('../models/Vulnerability');

// Helpers
const { existsOrError, differentOrError } = require('../helpers/validations');

module.exports = class VulnerabilityController {
    // Save vulnerability
    static async create(req, res) {
        // request body data
        const vulnerabilitys = { ...req.body };
        // request body image
        const image = req.file;

        // Validations
        try {
            // Validates if the values ​​came in the request
            existsOrError(vulnerabilitys.title, 'Título não informado!');
            existsOrError(
                vulnerabilitys.description,
                'Descrição não informada!'
            );
            existsOrError(
                vulnerabilitys.criticality,
                'Grau de criticidade não informado!'
            );
            existsOrError(
                vulnerabilitys.vulnerability,
                'Vunerabilidade não informada!'
            );
            existsOrError(vulnerabilitys.solution, 'Solução não informada!');

            // if the vulnerability is of type SAST, it will be necessary to send an image
            differentOrError(
                vulnerabilitys.vulnerability,
                'SAST',
                image,
                'Envie a imagem da evidência'
            );
        } catch (msg) {
            // returns error message and status
            return res.status(400).send(msg);
        }

        // assigns the data to their respective fields in the database
        const saveVulnerability = new Vulnerability({
            title: vulnerabilitys.title,
            description: vulnerabilitys.description,
            criticality: vulnerabilitys.criticality,
            vulnerability: vulnerabilitys.vulnerability,
            evidence: image,
            solution: vulnerabilitys.solution,
        });

        try {
            // Save the data in the database
            await saveVulnerability.save();
            // return success message after saving data
            res.status(201).send({
                msg: 'Vulnerabilidade cadastrada com sucesso!',
            });
        } catch (msg) {
            // if an error occurs during the registration of data in the database, an error will be returned.
            res.status(500).send({ msg: 'Opps... ocorreu um erro!' });
        }
    }

    static async getVulnerabilities(req, res) {
        // Data received in the query parameter of the request
        const { page = 1, limit = 10, search = '' } = req.query;

        // Fetch the number of records in the database
        const count = await Vulnerability.find().count();
        // Divides the number of records found in the database by the record limit and then rounds
        const totalPages = Math.ceil(count / limit);

        // If a value in the page parameter that is less or greater than the number of pages returns an error
        if (page > totalPages || page < totalPages) {
            res.status(400).send({ msg: 'Pagina inválida!' });
            return;
        }

        // Database search according to filters passed
        const vulnerabilities = await Vulnerability.find({
            $or: [
                { title: { $regex: search, $options: 'i' } },
                { criticality: { $regex: search, $options: 'i' } },
            ],
        })
            .sort('-createdAt')
            .limit(limit * 1)
            .skip((page - 1) * limit);

        // If everything goes well, it returns success status.
        res.status(200).json({
            vulnerabilities: vulnerabilities,
            page,
            limit,
            totalPages,
        });
    }
};
